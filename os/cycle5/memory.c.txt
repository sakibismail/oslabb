#include<stdio.h>
#include<stdlib.h>
int i;
int waste;
void first_fit(int b[],int m,int p[],int n)
{
int i,j,b1[10];
int alloc[n],f[m];
for(i=0;i<n;i++)
{
 alloc[i]=-1;
}
 for(i=0;i<m;i++)
{
 f[i]=0;
}
for(i= 0; i < n; i++)
{
 for(j = 0; j < m; j++)
 {
 if(f[j]==0)
 {
 if(b[j]>=p[i])
 {
 alloc[i]=j;
 b[j]-=p[i];
 b1[i]=b[j];
 f[j]=1;
 break;
 }
 }
 }
}
printf("\nProcess no.\tProcess size\tAllocated blocks\tRemaining space\n");
for(i=0;i<n;i++)
{
 printf("%d\t\t\t",i+1);
 printf("%d\t\t",p[i]);
 if(alloc[i] != -1)
 {
 printf("%d\t\t",alloc[i]+1);
 }
 else
 {
 printf("Need waiting\t");
 }
 if(alloc[i] != -1)
 {
 printf("%d",b1[i]);
 }
 else
 {
 printf("--");
 }
 printf("\n");
}
waste=0;
for(i=0;i<m;i++)
{
 waste += b1[i];
}
printf("Memory wastage: %d\n",waste);
}
void best_fit(int b[],int m,int p[],int n)
{
int i,j,b2[10];
int alloc[n],f[m];
for(i=0;i<n;i++)
{
 alloc[i]=-1;
}
for(i=0;i<m;i++)
{
 f[i]=0;
}
for(i=0;i<n;i++)
{
 int best=-1;
 for(j=0;j<m;j++)
 {
 if(f[j]==0)
 {
 if(b[j]>=p[i])
 {
 if(best==-1)
 best=j;
 else if(b[best]>b[j])
 best=j;
 }
 }
 }
 if(best!=-1)
 {
 alloc[i]=best;
 b[best]-=p[i];
 b2[i]=b[best];
 f[best]=1;
 }
}
printf("\nProcess no.\tProcess size\tAllocated blocks\tRemaining space\n");
for(i=0;i<n;i++)
{
 printf("%d\t\t\t",i+1);
 printf("%d\t\t",p[i]);
 if(alloc[i] != -1)
 {
 printf("%d\t\t",alloc[i]+1);
 }
 else
 {
 printf("Need waiting\t");
 }
 if(alloc[i] != -1)
 {
 printf("%d",b2[i]);
 }
 else
 {
 printf("--");
 }

 printf("\n");

}
waste=0;
for(i=0;i<m;i++)
{
 waste += b2[i];
}
printf("Memory wastage: %d\n",waste);
}
void worst_fit(int b[],int m,int p[],int n)
{
int i,j,b3[10];
int alloc[n],f[m];
for(i=0;i<n;i++)
{
 alloc[i]=-1;
}
for(i=0;i<m;i++)
{
 f[i]=0;
}
for(i=0;i<n;i++)
{
 int worst=-1;
 for(j=0;j<m;j++)
 {
 if(f[j]==0)
 {
 if(b[j]>=p[i])
 {
 if(worst==-1)
 worst=j;
 else if(b[worst]<b[j])
 worst=j;
 }
 }
 }
 if(worst!=-1)
 {
 alloc[i]=worst;
 b[worst]-=p[i];
 b3[i]=b[worst];
 f[worst]=1;
 }
}
printf("\nProcess no.\tProcess size\tAllocated blocks\tRemaining space\n");
for(i=0;i<n;i++)
{
 printf("%d\t\t\t",i+1);
 printf("%d\t\t",p[i]);
 if(alloc[i] != -1)
 {
 printf("%d\t\t",alloc[i]+1);
 }
 else
 {
 printf("Need waiting \t");
 }
 if(alloc[i] != -1)
 {
 printf("%d",b3[i]);
 }
 else
 {
 printf("--");
 }
 printf("\n");
}
waste = 0;
for(i=0;i<m;i++)
{
 waste += b3[i];
}
printf("Memory wastage: %d\n",waste);
}
int main()
{
int n,p[10],pb[10],pw[10],m,k,b[10],bb[10],bw[10];
printf("Enter the no.of processes:\n");
scanf("%d", &n);
printf("\nEnter the processes size:");
for(i=0;i<n;i++)
{
 printf("\nP%d: ",i+1);
 scanf("%d", &p[i]);
 pb[i]=p[i];
 pw[i]=p[i];
}
printf("Enter the no.of blocks:\n");
scanf("%d", &m);
printf("\nEnter the block sizes:");
for(i=0;i<m;i++)
{
 printf("\nB%d: ",i+1);
 scanf("%d", &b[i]);
 bb[i]=b[i];
 bw[i]=b[i];
}
while(1)
{
 printf("\nEnter\n1. First Fit\n2. Best Fit\n3. Worst Fit\n4. exit\n");
 scanf("%d", &k);
 switch(k)
 {
 case 1:
 first_fit(b,m,p,n);
 break;
 case 2:
 best_fit(bb,m,pb,n);
 break;
 case 3:
 worst_fit(bw,m,pw,n);
 break;
 case 4:
 exit(0);
 default:
 printf("Invalid vaue");
 }
}
return 0;
}